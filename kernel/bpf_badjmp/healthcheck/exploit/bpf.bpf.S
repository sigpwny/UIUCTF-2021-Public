// SPDX-License-Identifier: Apache-2.0
/*
 * Copyright 2021 Google LLC.
 */

	.text
	.section	socket, "ax", @progbits
	.globl		prog
	.p2align	3
	.type		prog, @function
prog:
	r8 = r1

	// int index = 0;
	// long *val = bpf_map_lookup_elem(&communicate, &index);
	r1 = 0
	*(u32 *)(r10 - 4) = r1
	r2 = r10
	r2 += -4
	r1 = communicate ll
	call 1
	if r0 == 0 goto 4f

	r9 = r0

	r0 = *(u64 *)(r9 + 0)

	// gef➤  ptype /o struct net_device
	// /*  208      |     4 */    int ifindex;
	r0 -= 208

	goto 2f
1:
	// gef➤  ptype /o struct __sk_buff
	// /*   40      |     4 */    __u32 ifindex;
	r0 = *(u32 *)(r8 + 40)
	// the above is rewritten to:
	// r0 = *(size_t *)(r8 + offsetof(struct sk_buff, dev))
	// if r0 == 0 goto +1
	// r0 = *(u32 *)(r0 + offsetof(struct net_device, ifindex))
	// ^ `goto back` jumps here

	goto 3f
2:
	goto 1b

3:
	*(u64 *)(r9 + 0) = r0
	r0 = 1
	exit

4:
	r0 = 0
	exit

.end:
	.size		prog, .end-prog

	.type		communicate, @object
	.section	maps, "aw", @progbits
	.globl		communicate
	.p2align	2
communicate:
	.long		2	// .type = BPF_MAP_TYPE_ARRAY,
	.long		4	// .key_size = sizeof(int),
	.long		8	// .value_size = sizeof(long),
	.long		1	// .max_entries = 1,
	.long		0	// .map_flags = 0,
	.size		communicate, 20

	.type		_license, @object
	.section	license, "aw", @progbits
	.globl		_license
_license:
	.asciz		"GPL"
	.size		_license, 4
